{"ast":null,"code":"var _jsxFileName = \"/home/patrick/Development/code/phase2/Bot_battlr/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport BotFilterSort from './components/BotFilterSort';\nimport BotSpecs from './components/BotSpecs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n  const [filterBy, setFilterBy] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n  const [selectedBot, setSelectedBot] = useState(null);\n  useEffect(() => {\n    // Fetch data from the API\n    fetch('http://localhost:3000/bots').then(response => response.json()).then(data => setBots(data)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n  const enlistBot = bot => {\n    if (!army.some(b => b.bot_class === bot.bot_class)) {\n      setArmy([...army, bot]);\n      removeBotFromCollection(bot.id);\n    } else {\n      alert(`You can only enlist one bot from the ${bot.bot_class} class.`);\n    }\n  };\n  const releaseBot = bot => {\n    const updatedArmy = army.filter(b => b.id !== bot.id);\n    setArmy(updatedArmy);\n  };\n  const dischargeForever = bot => {\n    // Send a DELETE request to the backend API to remove the bot permanently.\n    fetch(`http://localhost:3000/bots/${bot.id}`, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        // If the DELETE request was successful, update the frontend state.\n        const updatedBots = bots.filter(b => b.id !== bot.id);\n        const updatedArmy = army.filter(b => b.id !== bot.id);\n        setBots(updatedBots);\n        setArmy(updatedArmy);\n      } else {\n        throw new Error('Failed to delete the bot from the backend.');\n      }\n    }).catch(error => console.error('Error deleting the bot:', error));\n  };\n  const removeBotFromCollection = botId => {\n    const updatedBots = bots.filter(b => b.id !== botId);\n    setBots(updatedBots);\n  };\n  const goBackToListView = () => {\n    setSelectedBot(null);\n  };\n  const showBotSpecs = bot => {\n    setSelectedBot(bot);\n  };\n  const filteredAndSortedBots = bots.filter(bot => filterBy ? bot.bot_class === filterBy : true).sort((a, b) => {\n    if (sortBy === 'name') {\n      return a.name.localeCompare(b.name);\n    } else {\n      return b[sortBy] - a[sortBy];\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: selectedBot ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      bot: selectedBot,\n      goBackToListView: goBackToListView,\n      enlistBot: enlistBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n        army: army,\n        releaseBot: releaseBot,\n        dischargeForever: dischargeForever\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BotFilterSort, {\n        filterBy: filterBy,\n        sortBy: sortBy,\n        onFilterChange: setFilterBy,\n        onSortChange: setSortBy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n        bots: filteredAndSortedBots,\n        showBotSpecs: showBotSpecs,\n        enlistBot: enlistBot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"M0jm+mMoIEJr44oTd4VLoeJG8GQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","BotFilterSort","BotSpecs","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","bots","setBots","army","setArmy","filterBy","setFilterBy","sortBy","setSortBy","selectedBot","setSelectedBot","fetch","then","response","json","data","catch","error","console","enlistBot","bot","some","b","bot_class","removeBotFromCollection","id","alert","releaseBot","updatedArmy","filter","dischargeForever","method","ok","updatedBots","Error","botId","goBackToListView","showBotSpecs","filteredAndSortedBots","sort","a","name","localeCompare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onFilterChange","onSortChange","_c","$RefreshReg$"],"sources":["/home/patrick/Development/code/phase2/Bot_battlr/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport BotCollection from './components/BotCollection';\nimport YourBotArmy from './components/YourBotArmy';\nimport BotFilterSort from './components/BotFilterSort';\nimport BotSpecs from './components/BotSpecs';\n\nconst App = () => {\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n  const [filterBy, setFilterBy] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n  const [selectedBot, setSelectedBot] = useState(null);\n\n\n  useEffect(() => {\n    // Fetch data from the API\n    fetch('http://localhost:3000/bots')\n      .then((response) => response.json())\n      .then((data) => setBots(data))\n      .catch((error) => console.error('Error fetching data:', error));\n  }, []);\n\n  const enlistBot = (bot) => {\n    if (!army.some((b) => b.bot_class === bot.bot_class)) {\n      setArmy([...army, bot]);\n      removeBotFromCollection(bot.id);\n    } else {\n      alert(`You can only enlist one bot from the ${bot.bot_class} class.`);\n    }\n  };\n\n  const releaseBot = (bot) => {\n    const updatedArmy = army.filter((b) => b.id !== bot.id);\n    setArmy(updatedArmy);\n  };\n\n\n  const dischargeForever = (bot) => {\n    // Send a DELETE request to the backend API to remove the bot permanently.\n    fetch(`http://localhost:3000/bots/${bot.id}`, {\n      method: 'DELETE',\n    })\n      .then((response) => {\n        if (response.ok) {\n          // If the DELETE request was successful, update the frontend state.\n          const updatedBots = bots.filter((b) => b.id !== bot.id);\n          const updatedArmy = army.filter((b) => b.id !== bot.id);\n          setBots(updatedBots);\n          setArmy(updatedArmy);\n        } else {\n          throw new Error('Failed to delete the bot from the backend.');\n        }\n      })\n      .catch((error) => console.error('Error deleting the bot:', error));\n  };\n\n  const removeBotFromCollection = (botId) => {\n    const updatedBots = bots.filter((b) => b.id !== botId);\n    setBots(updatedBots);\n  };\n  \n\n  const goBackToListView = () => {\n    setSelectedBot(null);\n  };\n\n\n  const showBotSpecs = (bot) => {\n    setSelectedBot(bot);\n  };\n\n  const filteredAndSortedBots = bots\n  .filter((bot) => (filterBy ? bot.bot_class === filterBy : true))\n  .sort((a, b) => {\n    if (sortBy === 'name') {\n      return a.name.localeCompare(b.name);\n    } else {\n      return b[sortBy] - a[sortBy];\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      {selectedBot ? (\n        <BotSpecs bot={selectedBot} goBackToListView={goBackToListView} enlistBot={enlistBot} />\n      ) : (\n        <>\n          <YourBotArmy army={army} releaseBot={releaseBot} dischargeForever={dischargeForever} />\n          <BotFilterSort\n            filterBy={filterBy}\n            sortBy={sortBy}\n            onFilterChange={setFilterBy}\n            onSortChange={setSortBy}\n          />\n          <BotCollection bots={filteredAndSortedBots} showBotSpecs={showBotSpecs}  enlistBot={enlistBot}/>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}